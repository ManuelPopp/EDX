#############################################
##### Load packages
#############################################
if(FALSE){
  if(!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
  BiocManager::install("alsace")
  require("alsace")
}
# https://cran.r-project.org/web/packages/baseline/baseline.pdf
packages <- c("baseline", "pracma", "readxl", "prospectr", "stringr", "reshape2",
              "RColorBrewer", "colorRamps", "ggplot2", "plotly")#, "GauPro"
for(i in 1:NROW(packages)){
  if (!require(packages[i], character.only = TRUE)) {
    install.packages(packages[i])
    library(packages[i], character.only = TRUE)
  }
}
redfill <- rgb(1, 0, 0, 0.5)
# Element.lines = paste("/home/manuel/Nextcloud/Geochemische Analytik/R_XRF/", "Xray_Energies.xlsx", sep = "")
# Element.lines = "internal" see end of script
EDX <- function(wd = getwd(), Element.lines = internal, bg.fit = "rollingBall",
                smooth.deg = 1, min.peak.intensity = 100, peak.res = 12,
                bg.wm = 150, bg.ws = 200, bg.degree = 25, bg.tol = 0.001,
                bg.min.res = 150, bg.span = 0.1, bg.edit.manually = "n"){
  
  #############################################
  ##### Select sample
  #############################################
  cat("Samples in data directory:\n", paste(
    paste(seq(1, length(list.files(path = wd))), list.files(path = wd), sep = ": "),
    collapse = "\n"))
  Sample.no <- as.numeric(readline("Select sample: "))
  Sample <- list.files(path = wd)[Sample.no]
  
  #############################################
  ##### Load data
  #############################################
  if(is.character(Element.lines)){
    Energies <- as.data.frame(read_excel(Element.lines, sheet = 1))
  }else{
    Energies <- Element.lines
  }
  Energies[,-c(1, 2)] <- Energies[,-c(1, 2)]/1000
  ZeroInit <- as.numeric(strsplit(readLines(paste(wd, Sample, sep = ""))[26], split = ": ")[[1]][2])
  GainInit <- as.numeric(strsplit(readLines(paste(wd, Sample, sep = ""))[27], split = ": ")[[1]][2])
  counts <- read.table(paste(wd, Sample, sep = ""), sep = "\t", skip = 32)
  edx.data <- data.frame(energy = seq(1, NROW(counts))*GainInit + ZeroInit, cps = counts)
  
  #############################################
  ##### Smoothen data
  #############################################
  edx.raw <- edx.data
  degree <- smooth.deg
  for(i in 1:degree){
    a <- edx.data[, 2]
    n <- 3
    for(i in n:(nrow(edx.data)-n)){
      a[i] <- mean(edx.data[seq(i-n, i+n), 2])
    }
    plot(x = edx.data[, 1], y = edx.data[, 2], type = "l", xlim = c(5, 10), ylim = c(0, 2000))
    lines(x = edx.data[, 1], y = a, col = "red")
    edx.data[, 2] <- a
  }
  
  #############################################
  ##### Background calculation
  #############################################
  background <- function(dat, method = "rollingBall", WM = bg.wm, WS = bg.ws, DEG = bg.degree, TOL = bg.tol,
                         Min.res = 150, Span = 0.1, edit.manually = "n"){
    cps <- as.data.frame(dat[, 2])
    
    if(method == "rollingBall"){
      bl <- baseline::baseline(spectra = t(cps), wm = WM, ws = WS, method = "rollingBall")
    }else if(method == "fillPeaks"){
      bl <- baseline::baseline(t(cps), lambda = 1, hwi = 25, it = 50, int = round(nrow(cps)/4, 0), method = "fillPeaks")
    }else if(method == "modpolyfit"){
      bl <- baseline::baseline(spectra = t(cps), degree = DEG, tol = TOL, rep = 100, method = "modpolyfit")
    }else if(method == "TAP"){
      bl <- baseline::baseline(spectra = t(cps), interval = 600, tol = TOL, method = "TAP")
      plot(x = dat[, 1], y = dat[, 2], type = "l")
      lines(x = dat[, 1], y = bl@baseline, col = "red")
      lines(x = dat[, 1], y = bl@corrected, col = "blue")
    }else if(method == "irls"){
      bl <- baseline::baseline(spectra = t(cps), lambda1 = 8, lambda2 = 10, maxit = 600, wi = 1.5, method = "irls")
    }else if(method == "lowpass"){
      bl <- baseline::baseline(spectra = as.matrix(cps), steep = 2, half = 5, method = "lowpass")
    }else if(method == "shirley"){
      bl <- baseline::baseline(spectra = t(cps), t = NULL, limits = NULL, maxit = 500, err = 1e-3, method = "shirley")
    }else if(method == "medianWindow"){
      bl <- baseline::baseline(spectra = t(cps), hwm = 800, hws = 500, method = "medianWindow")
    }else if(method == "custom"){### custom baseline
      smth <- dat[, 2]
      for(i in 1:10){
        a <- smth
        n <- 5
        for(i in n:(nrow(edx.data)-n)){
          a[i] <- mean(edx.data[seq(i-n, i+n), 2])
        }
        smth <- a
      }
      #plot(x = dat[, 1], y = smooth, type = "l")
      #abline(v = dat[mins, 1], col = "red")
      mins <- which(smooth < c(0, smth[-length(smth)]) & smth < c(smth[-1], 0))
      minmins <- mins[-which(smth[mins] > smth[c(1, mins[-length(mins)])] &
                            smth[mins] > smth[c(mins[-1], 1)])]
      keep.min <- vector()
      min.res <- Min.res
      for(m in 1:length(mins)){
        if(dat[mins[m], 2] < 0.9*mean(smth[mins])){
          keep.min[m] <- "y"
        }else if(m > min.res & m < length(mins)-min.res){
          if(dat[mins[m], 2] < mean(smth[mins[seq(m-min.res, m+min.res)]])){
            keep.min[m] <- "y"
          }
        else{
          if(edit.manually == "y"){
            plot(x = dat[, 1], y = dat[, 2], type = "l",
                 xlim = c(dat[mins[m], 1]-2, dat[mins[m], 1]+2),
                 ylim = c(0, max(dat[which(dat[, 1] > dat[mins[m], 1]-2 & dat[, 1] < dat[mins[m], 1]+2), 2])))
            lines(x = dat[, 1], y = smth, col = "blue")
            abline(v = dat[mins[m], 1], col = "red")
            keep.min[m] <- readline(paste("Keep minimum at ", dat[mins, 1], "keV for background estimation? [y/n] "))
          }else{
            keep.min[m] <- "n"
          }
        }
        }}
      if(edit.manually == "interval"){
        continue <- "y"
        while(continue == "y"){
          lower <- as.numeric(readline("Enter lower limit (keV) of interval to exclude: "))
          upper <- as.numeric(readline("Enter upper limit (keV) of interval to exclude: "))
          keep.min[which(dat[mins, 1] > lower & dat[mins, 1] < upper)] <- "n"
          minmins <- mins[which(keep.min == "y")]
          gg <- ggplot(data = data.frame(energy = dat[, 1], cps = smth), aes(x = energy, y = cps)) +
            geom_line() +
            geom_point(data = data.frame(energy = dat[c(minmins), 1], cps = dat[c(minmins), 2])) +
            geom_smooth(method = "loess", data = data.frame(energy = dat[c(minmins), 1], cps = dat[c(minmins), 2]), span = Span)
          print(gg)
          continue <- readline("Exclude more minima? [y/n] ")
        }
      }else{
        minmins <- mins[which(keep.min == "y")]
        gg <- ggplot(data = data.frame(energy = dat[, 1], cps = smth), aes(x = energy, y = cps)) +
          geom_line() +
          geom_point(data = data.frame(energy = dat[c(minmins), 1], cps = dat[c(minmins), 2])) +
          geom_smooth(method = "loess", data = data.frame(energy = dat[c(minmins), 1], cps = dat[c(minmins), 2]), span = Span)
        print(gg)
      }
      blmod <- loess(cps ~ energy, data = data.frame(energy = dat[c(minmins), 1], cps = dat[c(minmins), 2]), span = Span)
      bl <- data.frame(x = dat[, 1], count = dat[, 2], background = predict(blmod, dat[, 1]), corrected = dat[, 2]-predict(blmod, dat[, 1]))
    }### end custom baseline
    if(method == "custom"){
      out <- list("x" = bl$x,
                  "counts" = bl$count,
                  "background" = bl$background,
                  "corrected" = bl$corrected
      )
    }else{
      out <- list("x" = dat[, 1],
                  "counts" = dat[, 2],
                  "background" = c(bl@baseline),
                  "corrected" = dat[, 2]-c(bl@baseline)
      )
      plot(bl)
      par(mfrow = c(1, 1))
    }
    return(out)
  }
  edit.bg <- "y"
  while(edit.bg == "y"){
    back.cor <- background(dat = edx.data, method = bg.fit, WM = bg.wm, WS = bg.ws,
                           DEG = bg.degree, TOL = bg.tol, Min.res = bg.min.res, Span = bg.span,
                           edit.manually = bg.edit.manually)
    tmp <- data.frame(Energy = rep(back.cor$x, times = 3), value = c(back.cor$counts, back.cor$background, back.cor$corrected),
                      line = rep(c("measured", "background", "corrected"), each = length(back.cor$x)))
    gg <- ggplot(data = tmp, aes(x = Energy, y = value, colour = line)) +
      geom_line()
    gly <- ggplotly(gg)
    viewer <- getOption("viewer")
    temp <- paste(tempdir(), "\\plot.html", sep = "")
    htmlwidgets::saveWidget(gly, temp)
    viewer(temp)
    cat("Explore background fit in the viewer panel.\n")
    edit.bg <- readline("Edit background settings? [y/n]: ")
    if(edit.bg == "y"){
      if(bg.fit == "rollingBall"){
        bg.wm <- as.numeric(readline(paste("Enter width of local window for minimization/maximization (current: ", bg.wm, "): ", sep = "")))
        bg.ws <- as.numeric(readline(paste("Enter width of local window for smoothing (current: ", bg.ws, "): ", sep = "")))
      }else if(bg.fit == "modpolyfit"){
        DEG <- as.numeric(readline(paste("Enter polynomial order (current: ", DEG, "): ", sep = "")))
        TOL <- as.numeric(readline(paste("Enter tolerance (current: ", TOL, "): ", sep = "")))
      }else if(bg.fit == "custom"){
        bg.min.res <- as.numeric(readline(paste("Enter local min resolution (current: ", bg.min.res, "): ", sep = "")))
        bg.span <- as.numeric(readline(paste("Enter loess reg span parameter (current: ", bg.span, "): ", sep = "")))
        bg.edit.manually <- readline(paste("Edit background minima manually (current: ", bg.edit.manually, ") [y/n/interval]: ", sep = ""))
      }
    }
  }
  appl.twice <- FALSE
  if(appl.twice & bg.fit == "modpolyfit"){
    back.cor <- background(dat = cbind(back.cor$x, back.cor$corrected), method = bg.fit)
    back.cor <- background(dat = data.frame(energy = back.cor$x, cps = back.cor$corrected), method = "rollingBall")
  }

  #############################################
  ##### Find peaks
  #############################################
  peaks <- function(dat, f = 1, peak.resolution = peak.res, min.peak.int = min.peak.intensity){
    tmp <- data.frame(x = dat$x, y = dat$corrected,
                      lower = rep(NA, length(dat$x)),
                      upper = rep(NA, length(dat$x)))
    for(i in peak.resolution:(nrow(tmp)-peak.resolution)){
      tmp$lower[i] <- max(dat$corrected[seq(i-peak.resolution, i-1)])
      tmp$upper[i] <- max(dat$corrected[seq(i+1, i+peak.resolution)])
    }
    out <- list("peak.nrgy" = dat$x[which(tmp$y > tmp$lower & tmp$y > tmp$upper & tmp$y > f*min.peak.int)],
                "peak.pos" = which(tmp$y > tmp$lower & tmp$y > tmp$upper & tmp$y > f*min.peak.int))
    plot(dat$corrected ~ dat$x, type = "l", main = "Detected peaks")
    abline(v = out$peak.nrgy, col = "red")
    return(out)
  }
  
  peak.list <- peaks(dat = back.cor)
  gp <- ggplot(data = data.frame(Energy = back.cor$x, Intensity = back.cor$corrected), aes(x = Energy, y = Intensity)) +
    geom_line() +
    geom_vline(xintercept = peak.list$peak.nrgy)
  ggplotly(gp)
  
  rep <- "y"
  while(rep == "y"){
    rep <- readline("Edit automatic peak settings? [y/n] ")
    if(rep == "y"){
      peak.res <- as.numeric(readline("Enter peak resolution: "))
      min.peak.intensity <- as.numeric(readline("Enter minimum peak intensity: "))
      peak.list <- peaks(dat = back.cor)
      gp <- ggplot(data = data.frame(Energy = back.cor$x, Intensity = back.cor$corrected), aes(x = Energy, y = Intensity)) +
        geom_line() +
        geom_vline(xintercept = peak.list$peak.nrgy)
      ggplotly(gp)
    }
  }
  
  keep.peak <- vector()
  for(c in 1:length(peak.list$peak.pos)){
    plot(x = back.cor$x, y = back.cor$corrected,
         xlim = c(peak.list$peak.nrgy[c]-5, peak.list$peak.nrgy[c]+5),
         ylim = c(0, back.cor$corrected[peak.list$peak.pos[c]]),
         type = "l")
    abline(v = peak.list$peak.nrgy[c], col = "red")
    keep.peak[c] <- readline("Keep peak? [y/n] ")
  }
  if(length(which(keep.peak == "n")) >= 1){
    peak.list <- list(
      "peak.nrgy" = peak.list$peak.nrgy[-which(keep.peak == "n")],
      "peak.pos" = peak.list$peak.pos[-which(keep.peak == "n")]
    )
  }
  
  #############################################
  ##### Peak area calculation
  #############################################
  area <- function(peaks, dat, mode = "multifit"){
    dat <- data.frame(x = dat$x, corrected = dat$corrected,
                      counts = dat$counts, background = dat$background)
    dat$fit <- rep(NA, nrow(dat))
    regx <- list()
    tmp <- data.frame(x = peaks$peak.pos, y = dat$corrected[peaks$peak.pos],
                      x_ngy = peaks$peak.nrgy,
                      lower = rep(NA, length(peaks$peak.pos)),
                      upper = rep(NA, length(peaks$peak.pos)),
                      area = rep(NA, length(peaks$peak.pos)),
                      trapz_area = rep(NA, length(peaks$peak.pos)))
    for(i in 1:length(peaks$peak.pos)){
      ## Approximate x-span of the peak
      n <- peaks$peak.pos[i]
      m <- peaks$peak.pos[i]
      o <- peaks$peak.pos[i]
      p <- peaks$peak.pos[i]
      # cut peaks when touching other peak
      while(mean(dat$corrected[c(n-1, n)]) > mean(dat$corrected[c(n-6, n-5, n-4, n-3, n-2, n-1)])){
        n <- n-1
      }
      while(mean(dat$corrected[c(m, m+1)]) > mean(dat$corrected[c(m+6, m+5, m+4, m+3, m+2, m+1)])){
        m <- m+1
      }
      # cut peaks above half maximum
      while(mean(dat$corrected[c(o-1, o)]) > dat$corrected[peaks$peak.pos[i]]/2){
        o <- o-1
      }
      while(mean(dat$corrected[c(p, p+1)]) > dat$corrected[peaks$peak.pos[i]]/2){
        p <- p+1
      }
      tmp$lower[i] <- max(n+1, o)
      tmp$upper[i] <- min(m-1, p)
      ## Gauss regression to estimate initial parameters
      regx[[i]] <- nls(corrected ~ k*exp(-1/2*(x-mu)^2/sigma^2),
                       start = c(mu = peak.list$peak.nrgy[i], sigma = (dat$x[peak.list$peak.pos[i]]-dat$x[tmp$lower[i]])/2,
                                 k = tmp$y[i]) , data = dat[seq(tmp$lower[i], tmp$upper[i]),])
      dat$fit[seq(tmp$lower[i], tmp$upper[i])] <- predict(regx[[i]], x = dat$x[seq(tmp$lower[i], tmp$upper[i])])
    }
    ######################################################### Gauss fit
    if(mode == "multifit"){
      max <- round(dat$x/10, 0)[length(dat$x)]
      segments <- list()
      for(s in 1:max){
        ## Best model fit (sum of Gauss)
        regxs <- regx[which(peak.list$peak.nrgy <= 10*s & peak.list$peak.nrgy > 10*s-10)]
        if(length(regxs) >= 1){
          pattern_formula <- as.formula(paste("corrected ~", paste(paste("k", rep(1:length(regxs)), sep = ""),
                                                                   "*exp(-1/2*(x-",
                                                                   paste("mu", rep(1:length(regxs)), sep = ""),
                                                                   ")^2/",
                                                                   paste("sigma",rep(1:length(regxs)), sep = ""), "^2)",
                                                                   sep = "", collapse = " + ")))
          init.param <- list()
          for(i in 1:length(regxs)){
            init.param[[i*3-2]] <- coefficients(regxs[[i]])[1]
            names(init.param[[i*3-2]]) <- paste("mu", i, sep = "")
            init.param[[i*3-1]] <- coefficients(regxs[[i]])[2]
            names(init.param[[i*3-1]]) <- paste("sigma", i, sep = "")
            init.param[[i*3]] <- coefficients(regxs[[i]])[3]
            names(init.param[[i*3]]) <- paste("k", i, sep = "")
          }
          plt.dat <- dat[which(dat$x <= 10*s & dat$x > 10*s-10),]
          segments[[s]] <- nls(formula = pattern_formula, data = plt.dat,
                               start = unlist(init.param), control = list(maxiter = 600))
          plt.dat$Gfit <- stats::predict(object = segments[[s]], newdata = plt.dat, na.action = na.pass)
          
          plot(corrected ~ x, data = plt.dat, type = "l")
          lines(x = plt.dat$x, y = plt.dat$Gfit, col = "red")
          legend("topright", col = c("black", "red"), lty = c(1, 1, 1), legend = c("bg corrected data", "model fit"), bty = "n")
        }
      }
    }
    
    #########################################################    
    ## Integrate area
    # estimated fit
    if(mode == "simplefit"){
      for(i in 1:length(peaks$peak.pos)){
        mu <- coefficients(regx[[i]])[1]
        sigma <- coefficients(regx[[i]])[2]
        k <- coefficients(regx[[i]])[3]
        tmp$area[i] <- integrate(f = function(x){k*exp(-1/2*(x-mu)^2/sigma^2)}, lower = min(dat$x), upper = max(dat$x))$value
        tmp$area.trapz[i] <- trapz(c(dat$x[tmp$lower[i]],
                                     dat$x[seq(tmp$lower[i], tmp$upper[i])],
                                     dat$x[tmp$upper[i]]),
                                   c(dat$background[tmp$lower[i]],
                                     dat$corrected[seq(tmp$lower[i], tmp$upper[i])],
                                     dat$background[tmp$upper[i]])
        )
      }
    }
    
    # "sum of Gauss" fit
    if(mode == "multifit"){
      tmp$area.fit <- rep(NA, nrow(tmp))
      mult.Gauss <- list()
      for(i in 1:length(segments)){
        if(length(coefficients(segments[[i]])) >= 1){
          for(j in 1:(length(coefficients(segments[[i]]))/3)){
            mu <- coefficients(segments[[i]])[j*3-2]
            sigma <- coefficients(segments[[i]])[j*3-1]
            k  <- coefficients(segments[[i]])[j*3]
            mult.Gauss$mu[[i*j]] <- mu
            mult.Gauss$sigma[[i*j]] <- sigma
            mult.Gauss$k[[i*j]] <- k
            area_integ <- integrate(f = function(x){k*exp(-1/2*(x-mu)^2/sigma^2)}, lower = min(dat$x), upper = max(dat$x))$value
            tmp$area[which(abs(tmp$x_ngy-mu) == min(abs(tmp$x_ngy-mu)))] <- area_integ
          }
        }
      }
    }
    
    #########################################################
    ### Plot results
    # simple fit
    if(mode == "simplefit"){
      plot(dat$corrected ~ dat$x, type = "l", main = "Peak areas simple fit")
      lines(fit ~ x, data = dat, col = "blue")
      for(r in 1:length(regx)){
        colour <- paste(colorRamps::primary.colors(n = length(regx)), "70", sep = "")[r]
        mu <- coefficients(regx[[r]])[1]
        sigma <- coefficients(regx[[r]])[2]
        k <- coefficients(regx[[r]])[3]
        X <- dat$x
        Y <- k*exp(-1/2*(X-mu)^2/sigma^2)
        lines(x = X, y = Y, lty = 2, col = colour)
        polygon(x = X, y = Y, col = colour)
      }
    }
    # multi fit
    if(mode == "multifit"){
      plot(dat$corrected ~ dat$x, type = "l", main = "Peak areas multiple Gauss optimized fit")
      ncols <- length(peak.list$peak.nrgy)+10
      for(i in 1:length(segments)){
        if(length(coefficients(segments[[i]])) >= 1){
          for(j in 1:(length(coefficients(segments[[i]]))/3)){
            colour <- paste(colorRamps::primary.colors(
              n = ncols
              ), "70", sep = "")[i*j]
            mu <- coefficients(segments[[i]])[j*3-2]
            sigma <- coefficients(segments[[i]])[j*3-1]
            k  <- coefficients(segments[[i]])[j*3]
            X <- dat$x
            Y <- k*exp(-1/2*(X-mu)^2/sigma^2)
            lines(x = X, y = Y, lty = 2, col = colour)
            polygon(x = X, y = Y, col = colour)
          }
        }
      }
    }
    if(mode == "simplefit"){
      regression <- regx
    }else if(mode == "multifit"){
      regression <- mult.Gauss
    }
    out <- list("area" = tmp$area, "reg_mod" = regression)
  }
  
  peak.area <- area(dat = back.cor, peaks = peak.list, mode = "simplefit")$area
  mult.area <- area(dat = back.cor, peaks = peak.list, mode = "multifit")$area
  reg <- area(dat = back.cor, peaks = peak.list, mode = "simplefit")$reg_mod
  reg.mult <- area(dat = back.cor, peaks = peak.list, mode = "multifit")$reg_mod
  
  #############################################
  ##### Add areas to peak list
  #############################################
  peak.list$peak.area <- peak.area
  peak.list$peak.areaGfit <- mult.area
  peak.list$peak.intensity <- back.cor$corrected[peak.list$peak.pos]
  
  #############################################
  ##### Find elements with K alpha 1 closest to peak location
  #############################################
  findElement <- function(x, energies = Energies, out){
    engs <- melt(energies, id.vars = c("Z", "Element"))
    elmt <- engs$Element[which(abs(engs$value-x) == min(abs(engs$value-x), na.rm = TRUE))]
    lne <- engs$variable[which(abs(engs$value-x) == min(abs(engs$value-x), na.rm = TRUE))]
    if(out == "element"){
      ot <- elmt
    }else if(out == "line"){
      ot <- lne
    }
    return(ot)
  }
  
  peak.list$element <- lapply(peak.list$peak.nrgy, FUN = findElement, out = "element")
  peak.list$line <- lapply(peak.list$peak.nrgy, FUN = findElement, out = "line")
  
  ### Plot element lines in peak list
  # k_beta/ k-alpha ratio based on Yilmaz (2017)
  #ab <- data.frame(Z = c(21, 23, 24, 27, 28, 29,32, 33, 35, 37, 39, 40, 41),
  #                 Kba = c(0.1106, 0.1161, 0.1153, 0.1218, 0.1227, 0.1211, 0.131, 0.1369, 0.1525, 0.1588, 0.1696, 0.1738, 0.1772))
  #cs <- coefficients(lm(Kba ~ Z, data = ab))
  #elem.lines <- melt(Energies[which(Energies$Element %in% peak.list$element[[1]]),], id.vars = c("Z", "Element"))
  #gg <- ggplot(data = back.cor, aes(x = x, y = corrected)) +
  #  geom_line()
  #ggplotly(gg)
  
  #############################################
  ##### Select peaks that should be attributed to another element
  #############################################
  peakSelect <- function(peaklist = peak.list, dat = back.cor, mod = reg, energies = Energies){
    peak_energies <- peak.list$peak.nrgy
    peak_intensities <- peak.list$peak.intensity
    peak_elements <- peak.list$element
    peak_lines <- peak.list$line
    assgnd.elem <- list("Element" = peak.list$element, "Line" = peak.list$line)
    engs <- melt(energies, id.vars = c("Z", "Element"))
    for(i in 1:length(peak_lines)){
      dat <- data.frame(x = dat$x, corrected = dat$corrected,
                        counts = dat$counts, background = dat$background)
      mu <- coefficients(mod[[i]])[1]
      sigma <- coefficients(mod[[i]])[2]
      k <- coefficients(mod[[i]])[3]
      X <- dat$x
      Y <- k*exp(-1/2*(X-mu)^2/sigma^2)
      ext <- 2.5/100*(max(dat$x)-min(dat$x))
      plot(corrected ~ x, data = dat, type = "l",
           xlim = c(peak_energies[i]-ext, peak_energies[i]+ext),
           ylim = c(0, peak_intensities[i]))
      polygon(x = X, y = Y, col = redfill)
      l <- str_replace(peak_lines[[i]], "a", "alpha ")
      l <- str_replace(l, "b", "beta ")
      l <- str_replace(l, "y", "gamma ")
      l <- str_replace(l, "_", "[")
      l <- paste(l, "]", sep = "")
      text(x = peak_energies[i]+0.1, y = peak_intensities[i], labels = as.expression(paste(peak_elements[[i]], l)),
           adj = c(0, 1))
      alternatives <- engs[which(abs(c(engs$value-peak_energies[i])) %in% sort(abs(c(engs$value-peak_energies[i])))[c(1, 2, 3)]), ]
      cat("Peak at: ", peak_energies[i], "keV.\nNearby lines:\n",
          paste(alternatives$Element[1], alternatives$variable[1], "@", alternatives$value[1]), "eV\n",
          paste(alternatives$Element[2], alternatives$variable[2], "@", alternatives$value[2]), "eV\n",
          paste(alternatives$Element[3], alternatives$variable[3], "@", alternatives$value[3]), "eV\n")
      choice <- readline(paste("Is this the ", peak_lines[[i]], " peak of ", peak_elements[[i]], "? [y/n] ", sep = ""))
      if(choice == "N"|choice == "n"){
        assgnd.elem$Element[i] <- readline("Enter element symbol: ")
        assgnd.elem$Line[i] <- readline("Enter element symbol (Ka1/Ka2/Kb1/La1/La2/Lb1/Lb2/Ly1/Ma1): ")
      }else if(choice == "Y"|choice == "y"){}else{
        stop("Invalid input.")
      }
    }
    return(assgnd.elem)
  }
  els <- peakSelect()
  peak.list$element <- els$Element
  peak.list$line <- unlist(lapply(els$Line, FUN = str_replace, pattern = "_", replacement = ""))
  
  #############################################
  ##### Find peak overlaps
  #############################################
  # Kann man von Ka1 auf Ka2 intensity und FWHM schliessen? -> Einfach vom Pattern abziehen, um restliche Peaks zu bekommen?
  
  #############################################
  ##### Generate output table
  #############################################
  out.tab <- data.frame(
    Element = unlist(peak.list$element),
    Line = unlist(peak.list$line),
    Area = unlist(peak.list$peak.area),
    Gfit.Area = unlist(peak.list$peak.areaGfit),
    PeakPos = unlist(peak.list$peak.pos),
    PeakEngy = unlist(peak.list$peak.nrgy)
  )
  cat("Output generated.\nIf you have any questions or suggestions, please contact manuel.popp@student.kit.edu.")
  return(out.tab)
}

##########################################################################################
##########################################################################################
################################### Compton correction ###################################
##########################################################################################
##########################################################################################
Compton.shift <- function(psi){
  h <- 6.62607015*10^{-34}
  m_e <- 8.187105776925*10^{-14}
  c <- 299792458
  D_lambda <- h/(m_e*c)*(1-cos(psi))
  D_energy <- h*c/D_lambda
  out <- c(D_lambda, D_energy)
  names(out) <- c("D_lambda", "D_energy")
  return(out)
}

Compton.cor <- function(wd = getwd(), edx, bg.wm = 300, bg.ws = 100){
  #############################################
  ##### Select sample
  #############################################
  cat("Samples in data directory:\n", paste(
    paste(seq(1, length(list.files(path = wd))), list.files(path = wd), sep = ": "),
    collapse = "\n"))
  Sample.no <- as.numeric(readline("Select sample for Compton correction:"))
  Sample <- list.files(path = wd)[Sample.no]
  
  #############################################
  ##### Load data
  #############################################
  ZeroInit <- as.numeric(strsplit(readLines(paste(wd, Sample, sep = ""))[26], split = ": ")[[1]][2])
  GainInit <- as.numeric(strsplit(readLines(paste(wd, Sample, sep = ""))[27], split = ": ")[[1]][2])
  counts <- read.table(paste(wd, Sample, sep = ""), sep = "\t", skip = 32)
  edx.data <- data.frame(energy = seq(1, NROW(counts))*GainInit + ZeroInit, cps = counts)
  
  #############################################
  ##### Smoothen data
  #############################################
  a <- edx.data[, 2]
  n <- 3
  for(i in n:(nrow(edx.data)-n)){
    a[i] <- mean(edx.data[seq(i-n, i+n), 2])
  }
  plot(x = edx.data[, 1], y = edx.data[, 2], type = "l", xlim = c(5, 10), ylim = c(0, 2000))
  lines(x = edx.data[, 1], y = a, col = "red")
  edx.data[, 2] <- a
  
  #############################################
  ##### Background calculation
  #############################################
  background <- function(dat, method = "rollingBall", WM = bg.wm, WS = bg.ws){
    cps <- as.data.frame(dat[, 2])
    
    if(method == "rollingBall"){
      bl <- baseline::baseline(spectra = t(cps), wm = WM, ws = WS, method = "rollingBall")
    }else if(method == "fillPeaks"){
      bl <- baseline::baseline(t(cps), lambda = 1, hwi = 25, it = 50, int = round(nrow(cps)/4, 0), method = "fillPeaks")
    }else if(method == "modpolyfit"){
      bl <- baseline::baseline(spectra = t(cps), degree = 25, tol = 0.001, rep = 100, method = "modpolyfit")
    }
    out <- list("x" = dat[, 1],
                "counts" = dat[, 2],
                "background" = c(bl@baseline),
                "corrected" = dat[, 2]-c(bl@baseline)
    )
    plot(bl)
    par(mfrow = c(1, 1))
    return(out)
  }
  back.cor <- background(dat = edx.data)
  tmp <- data.frame(Energy = rep(back.cor$x, times = 3), value = c(back.cor$counts, back.cor$background, back.cor$corrected),
                    line = rep(c("measured", "background", "corrected"), each = length(back.cor$x)))
  gg <- ggplot(data = tmp, aes(x = Energy, y = value, colour = line)) +
    geom_line()
  ggplotly(gg)
  
  #############################################
  ##### Select Compton peak
  #############################################
  conf = "n"
  while(conf == "n"){
    comptEn <- as.numeric(readline("Enter Compton peak energy [eV]: "))
    plot(corrected ~ x, data = back.cor, type = "l", xlim = c(comptEn-6, comptEn+6))
    abline(v = comptEn, col = "red")
    conf <- readline(paste("Continue with ", comptEn, "? [y]\nEnter [n] to adjust Compton peak position."))
  }
  peaks <- function(dat, f = 1, peak.resolution = 8, min.peak.int = 50){
    tmp <- data.frame(x = dat$x, y = dat$corrected,
                      lower = rep(NA, length(dat$x)),
                      upper = rep(NA, length(dat$x)))
    for(i in peak.resolution:(nrow(tmp)-peak.resolution)){
      tmp$lower[i] <- max(dat$corrected[seq(i-peak.resolution, i-1)])
      tmp$upper[i] <- max(dat$corrected[seq(i+1, i+peak.resolution)])
    }
    out <- list("peak.nrgy" = dat$x[which(tmp$y > tmp$lower & tmp$y > tmp$upper & tmp$y > f*min.peak.int)],
                "peak.pos" = which(tmp$y > tmp$lower & tmp$y > tmp$upper & tmp$y > f*min.peak.int))
    plot(dat$corrected ~ dat$x, type = "l", main = "Detected peaks")
    abline(v = out$peak.nrgy, col = "red")
    return(out)
  }
  pks <- peaks(dat = back.cor)
  
  peak.list <- list(
    "peak.nrgy" = pks$peak.nrgy[which(abs(pks$peak.nrgy - comptEn) == min(abs(pks$peak.nrgy - comptEn)))],
    "peak.pos" = pks$peak.pos[which(abs(pks$peak.nrgy - comptEn) == min(abs(pks$peak.nrgy - comptEn)))]
  )
  
  #############################################
  ##### Peak area calculation
  #############################################
  by.area <- FALSE
  if(by.area){
    area <- function(peaks, dat){
      dat <- data.frame(x = dat$x, corrected = dat$corrected,
                        counts = dat$counts, background = dat$background)
      dat$fit <- rep(NA, nrow(dat))
      regx <- list()
      tmp <- data.frame(x = peaks$peak.pos, y = dat$corrected[peaks$peak.pos],
                        lower = rep(NA, length(peaks$peak.pos)),
                        upper = rep(NA, length(peaks$peak.pos)),
                        area = rep(NA, length(peaks$peak.pos)),
                        trapz_area = rep(NA, length(peaks$peak.pos)))
      for(i in 1:length(peaks$peak.pos)){
        ## Approximate x-span of the peak
        n <- peaks$peak.pos[i]
        m <- peaks$peak.pos[i]
        o <- peaks$peak.pos[i]
        p <- peaks$peak.pos[i]
        # cut peaks when touching other peak
        while(mean(dat$corrected[c(n+1, n, n-1)]) > mean(dat$corrected[c(n-4, n-3, n-2)])){
          n <- n-1
        }
        while(mean(dat$corrected[c(m, m+1, m-1)]) > mean(dat$corrected[c(m+4, m+3, m+2)])){
          m <- m+1
        }
        # cut peaks above half maximum
        while(mean(dat$corrected[c(o-1, o)]) > dat$corrected[peaks$peak.pos[i]]/2){
          o <- o-1
        }
        while(mean(dat$corrected[c(p, p+1)]) > dat$corrected[peaks$peak.pos[i]]/2){
          p <- p+1
        }
        tmp$lower[i] <- max(n+1, o)
        tmp$upper[i] <- min(m-1, p)
        ## Peak shape regression
        regx[[i]] <- nls(corrected ~ k*exp(-1/2*(x-mu)^2/sigma^2),
                         start = c(mu = peak.list$peak.nrgy[i], sigma = (dat$x[peak.list$peak.pos[i]]-dat$x[tmp$lower[i]])/2,
                                   k = tmp$y[i]) , data = dat[seq(tmp$lower[i], tmp$upper[i]),])
        dat$fit[seq(tmp$lower[i], tmp$upper[i])] <- predict(regx[[i]], x = dat$x[seq(tmp$lower[i], tmp$upper[i])])
        ## Integrate area
        mu <- coefficients(regx[[i]])[1]
        sigma <- coefficients(regx[[i]])[2]
        k <- coefficients(regx[[i]])[3]
        tmp$area[i] <- integrate(f = function(x){k*exp(-1/2*(x-mu)^2/sigma^2)}, lower = min(dat$x), upper = max(dat$x))$value
        tmp$trapz_area[i] <- trapz(c(dat$x[tmp$lower[i]],
                                     dat$x[seq(tmp$lower[i], tmp$upper[i])],
                                     dat$x[tmp$upper[i]]),
                                   c(dat$background[tmp$lower[i]],
                                     dat$corrected[seq(tmp$lower[i], tmp$upper[i])],
                                     dat$background[tmp$upper[i]])
        )
      }
      plot(dat$corrected ~ dat$x, type = "l", main = "Peak areas")
      lines(fit ~ x, data = dat, col = "blue")
      for(r in 1:length(regx)){
        colour <- paste(colorRamps::primary.colors(n = length(regx)), "70", sep = "")[r]
        mu <- coefficients(regx[[r]])[1]
        sigma <- coefficients(regx[[r]])[2]
        k <- coefficients(regx[[r]])[3]
        X <- dat$x
        Y <- k*exp(-1/2*(X-mu)^2/sigma^2)
        lines(x = X, y = Y, lty = 2, col = colour)
        polygon(x = X, y = Y, col = colour)
      }
      out <- list("area" = tmp$area, "reg_mod" = regx)
    }
    
    peak.area <- area(dat = back.cor, peaks = peak.list)$area
    reg <- area(dat = back.cor, peaks = peak.list)$reg_mod
    
    #############################################
    ##### Add area to peak list
    #############################################
    peak.list$peak.area <- peak.area
  }
  
  peak.list$peak.intensity <- back.cor$corrected[peak.list$peak.pos]
  
  #############################################
  ##### Divide areas by Compton peak
  #############################################
  if(by.area){
    edx[which(edx$PeakEngy > comptEn),]$Area <- edx[which(edx$PeakEngy > comptEn),]$Area/peak.list$peak.area[[1]]
  }else{
    edx[which(edx$PeakEngy > comptEn),]$Area <- edx[which(edx$PeakEngy > comptEn),]$Area/peak.list$peak.intensity[[1]]
  }
  return(edx)
}

###########################
### internal element energy list
internal <- structure(list(Z = c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
                                 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
                                 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
                                 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 
                                 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 
                                 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 
                                 95), Element = c("Li", "Be", "B", "C", "N", "O", "F", "Ne", "Na", 
                                                  "Mg", "Al", "Si", "P", "S", "Cl", "Ar", "K", "Ca", "Sc", "Ti", 
                                                  "V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn", "Ga", "Ge", "As", 
                                                  "Se", "Br", "Kr", "Rb", "Sr", "Y", "Zr", "Nb", "Mo", "Tc", "Ru", 
                                                  "Rh", "Pd", "Ag", "Cd", "In", "Sn", "Sb", "Te", "I", "Xe", "Cs", 
                                                  "Ba", "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", 
                                                  "Ho", "Er", "Tm", "Yb", "Lu", "Hf", "Ta", "W", "Re", "Os", "Ir", 
                                                  "Pt", "Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra", 
                                                  "Ac", "Th", "Pa", "U", "Np", "Pu", "Am"), K_a1 = c(54.3, 108.5, 
                                                                                                     183.3, 277, 392.4, 524.9, 676.8, 848.6, 1040.98, 1253.6, 1486.7, 
                                                                                                     1739.98, 2013.7, 2307.84, 2622.39, 2957.7, 3313.8, 3691.68, 4090.6, 
                                                                                                     4510.84, 4952.2, 5414.72, 5898.75, 6403.84, 6930.32, 7478.15, 
                                                                                                     8047.78, 8638.86, 9251.74, 9886.42, 10543.72, 11222.4, 11924.2, 
                                                                                                     12649, 13395.3, 14165, 14958.4, 15775.1, 16615.1, 17479.34, 18367.1, 
                                                                                                     19279.2, 20216.1, 21177.1, 22162.92, 23173.6, 24209.7, 25271.3, 
                                                                                                     26359.1, 27472.3, 28612, 29779, 30972.8, 32193.6, 33441.8, 34719.7, 
                                                                                                     36026.3, 37361, 38724.7, 40118.1, 41542.2, 42996.2, 44481.6, 
                                                                                                     45998.4, 47546.7, 49127.7, 50741.6, 52388.9, 54069.8, 55790.2, 
                                                                                                     57532, 59318.24, 61140.3, 63000.5, 64895.6, 66832, 68803.7, 70819, 
                                                                                                     72871.5, 74969.4, 77107.9, 79290, 81520, 83780, 86100, 88470, 
                                                                                                     90884, 93350, 95868, 98439, NA, NA, NA), K_a2 = c(NA, NA, NA, 
                                                                                                                                                       NA, NA, NA, NA, 848.6, 1040.98, 1253.6, 1486.27, 1739.38, 2012.7, 
                                                                                                                                                       2306.64, 2620.78, 2955.63, 3311.1, 3688.09, 4086.1, 4504.86, 
                                                                                                                                                       4944.64, 5405.509, 5887.65, 6390.84, 6915.3, 7460.89, 8027.83, 
                                                                                                                                                       8615.78, 9224.82, 9855.32, 10507.99, 11181.4, 11877.6, 12598, 
                                                                                                                                                       13335.8, 14097.9, 14882.9, 15690.9, 16521, 17374.3, 18250.8, 
                                                                                                                                                       19150.4, 20073.7, 21020.1, 21990.3, 22984.1, 24002, 25044, 26110.8, 
                                                                                                                                                       27201.7, 28317.2, 29458, 30625.1, 31817.1, 33034.1, 34278.9, 
                                                                                                                                                       35550.2, 36847.4, 38171.2, 39522.4, 40901.9, 42308.9, 43744.1, 
                                                                                                                                                       45207.8, 46699.7, 48221.1, 49772.6, 51354, 52965, 54611.4, 56277, 
                                                                                                                                                       57981.7, 59717.9, 61486.7, 63286.7, 65112, 66989.5, 68895, 70831.9, 
                                                                                                                                                       72804.2, 74814.8, 76862, 78950, 81070, 83230, 85430, 87670, 89953, 
                                                                                                                                                       92287, 94665, NA, NA, NA), K_b1 = c(NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                           NA, 1071.1, 1302.2, 1557.45, 1835.94, 2139.1, 2464.04, 2815.6, 
                                                                                                                                                                                           3190.5, 3589.6, 4012.7, 4460.5, 4931.81, 5427.29, 5946.71, 6490.45, 
                                                                                                                                                                                           7057.98, 7649.43, 8264.66, 8905.29, 9572, 10264.2, 10982.1, 11726.2, 
                                                                                                                                                                                           12495.9, 13291.4, 14112, 14961.3, 15835.7, 16737.8, 17667.8, 
                                                                                                                                                                                           18622.5, 19608.3, 20619, 21656.8, 22723.6, 23818.7, 24942.4, 
                                                                                                                                                                                           26095.5, 27275.9, 28486, 29725.6, 30995.7, 32294.7, 33624, 34986.9, 
                                                                                                                                                                                           36378.2, 37801, 39257.3, 40748.2, 42271.3, 43826, 45413, 47037.9, 
                                                                                                                                                                                           48697, 50382, 52119, 53877, 55681, 57517, 59370, 61283, 63234, 
                                                                                                                                                                                           65223, 67244.3, 69310, 71413, 73560.8, 75748, 77984, 80253, 82576, 
                                                                                                                                                                                           84936, 87343, 89800, 92300, 94870, 97470, 100130, 102850, 105609, 
                                                                                                                                                                                           108427, 111300, NA, NA, NA), L_a1 = c(NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                 NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 341.3, 395.4, 452.2, 
                                                                                                                                                                                                                                 511.3, 572.8, 637.4, 705, 776.2, 851.5, 929.7, 1011.7, 1097.92, 
                                                                                                                                                                                                                                 1188, 1282, 1379.1, 1480.43, 1586, 1694.13, 1806.56, 1922.56, 
                                                                                                                                                                                                                                 2042.36, 2165.89, 2293.16, 2424, 2558.55, 2696.74, 2838.61, 2984.31, 
                                                                                                                                                                                                                                 3133.73, 3286.94, 3443.98, 3604.72, 3769.33, 3937.65, 4109.9, 
                                                                                                                                                                                                                                 4286.5, 4466.26, 4650.97, 4840.2, 5033.7, 5230.4, 5432.5, 5636.1, 
                                                                                                                                                                                                                                 5845.7, 6057.2, 6272.8, 6495.2, 6719.8, 6948.7, 7179.9, 7415.6, 
                                                                                                                                                                                                                                 7655.5, 7899, 8146.1, 8397.6, 8652.5, 8911.7, 9175.1, 9442.3, 
                                                                                                                                                                                                                                 9713.3, 9988.8, 10268.5, 10551.5, 10838.8, 11130.8, 11426.8, 
                                                                                                                                                                                                                                 11727, 12031.3, 12339.7, 12652, 12968.7, 13290.7, 13614.7, 13944.1, 
                                                                                                                                                                                                                                 14278.6, 14617.2), L_a2 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                                             NA, NA, NA, NA, NA, NA, NA, NA, 341.3, 395.4, 452.2, 511.3, 572.8, 
                                                                                                                                                                                                                                                             637.4, 705, 776.2, 851.5, 929.7, 1011.7, 1097.92, 1188, 1282, 
                                                                                                                                                                                                                                                             1379.1, 1480.43, 1586, 1692.56, 1804.74, 1920.47, 2039.9, 2163, 
                                                                                                                                                                                                                                                             2289.85, 2420, 2554.31, 2692.05, 2833.29, 2978.21, 3126.91, 3279.29, 
                                                                                                                                                                                                                                                             3435.42, 3595.32, 3758.8, 3926.04, NA, 4272.2, 4450.9, 4634.23, 
                                                                                                                                                                                                                                                             4823, 5013.5, 5207.7, 5407.8, 5609, 5816.6, 6025, 6238, 6457.7, 
                                                                                                                                                                                                                                                             6679.5, 6905, 7133.1, 7367.3, 7604.9, 7844.6, 8087.9, 8335.2, 
                                                                                                                                                                                                                                                             8586.2, 8841, 9099.5, 9361.8, 9628, 9897.6, 10172.8, 10449.5, 
                                                                                                                                                                                                                                                             10730.91, 11015.8, 11304.8, 11597.9, 11895, 12196.2, 12500.8, 
                                                                                                                                                                                                                                                             12809.6, 13122.2, 13438.8, 13759.7, 14084.2, 14411.9), L_b1 = c(NA, 
                                                                                                                                                                                                                                                                                                                             NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                                                                                                             344.9, 399.6, 458.4, 519.2, 582.8, 648.8, 718.5, 791.4, 868.8, 
                                                                                                                                                                                                                                                                                                                             949.8, 1034.7, 1124.8, 1218.5, 1317, 1419.23, 1525.9, 1636.6, 
                                                                                                                                                                                                                                                                                                                             1752.17, 1871.72, 1995.84, 2124.4, 2257.4, 2394.81, 2538, 2683.23, 
                                                                                                                                                                                                                                                                                                                             2834.41, 2990.22, 3150.94, 3316.57, 3487.21, 3662.8, 3843.57, 
                                                                                                                                                                                                                                                                                                                             4029.58, 4220.72, NA, 4619.8, 4827.53, 5042.1, 5262.2, 5488.9, 
                                                                                                                                                                                                                                                                                                                             5721.6, 5961, 6205.1, 6456.4, 6713.2, 6978, 7247.7, 7525.3, 7810.9, 
                                                                                                                                                                                                                                                                                                                             8101, 8401.8, 8709, 9022.7, 9343.1, 9672.35, 10010, 10355.3, 
                                                                                                                                                                                                                                                                                                                             10708.3, 11070.7, 11442.3, 11822.6, 12213.3, 12613.7, 13023.5, 
                                                                                                                                                                                                                                                                                                                             13447, 13876, 14316, 14770, 15235.8, 15713, 16202.2, 16702, 17220, 
                                                                                                                                                                                                                                                                                                                             17750.2, 18293.7, 18852), L_b2 = c(NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                                                                                                                                                NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                                                                                                                                                NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 2219.4, 
                                                                                                                                                                                                                                                                                                                                                                2367, 2518.3, 2674, 2836, 3001.3, 3171.79, 3347.81, 3528.12, 
                                                                                                                                                                                                                                                                                                                                                                3713.81, 3904.86, 4100.78, 4301.7, 4507.5, NA, 4935.9, 5156.5, 
                                                                                                                                                                                                                                                                                                                                                                5383.5, 5613.4, 5850, 6089.4, 6339, 6586, 6843.2, 7102.8, 7366.7, 
                                                                                                                                                                                                                                                                                                                                                                7635.7, 7911, 8189, 8468, 8758.8, 9048.9, 9347.3, 9651.8, 9961.5, 
                                                                                                                                                                                                                                                                                                                                                                10275.2, 10598.5, 10920.3, 11250.5, 11584.7, 11924.1, 12271.5, 
                                                                                                                                                                                                                                                                                                                                                                12622.6, 12979.9, 13340.4, NA, NA, 14450, 14841.4, NA, 15623.7, 
                                                                                                                                                                                                                                                                                                                                                                16024, 16428.3, 16840, 17255.3, 17676.5), L_y1 = c(NA, NA, NA, 
                                                                                                                                                                                                                                                                                                                                                                                                                   NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                                                                                                                                                                                                   NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                                                                                                                                                                                                   NA, NA, 2302.7, 2461.8, 2623.5, 2792, 2964.5, 3143.8, 3328.7, 
                                                                                                                                                                                                                                                                                                                                                                                                                   3519.59, 3716.86, 3920.81, 4131.12, 4347.79, 4570.9, 4800.9, 
                                                                                                                                                                                                                                                                                                                                                                                                                   NA, 5280.4, 5531.1, 5788.5, 6052, 6322.1, 6602.1, 6892, 7178, 
                                                                                                                                                                                                                                                                                                                                                                                                                   7480.3, 7785.8, 8102, 8418.8, 8747, 9089, 9426, 9780.1, 10143.4, 
                                                                                                                                                                                                                                                                                                                                                                                                                   10515.8, 10895.2, 11285.9, 11685.4, 12095.3, 12512.6, 12942, 
                                                                                                                                                                                                                                                                                                                                                                                                                   13381.7, 13830.1, 14291.5, 14764.4, 15247.7, 15744, 16251, 16770, 
                                                                                                                                                                                                                                                                                                                                                                                                                   17303, 17849, 18408, 18982.5, 19568, 20167.1, 20784.8, 21417.3, 
                                                                                                                                                                                                                                                                                                                                                                                                                   22065.2), M_a1 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                                                                                                                                                                                                                      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                                                                                                                                                                                                                      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
                                                                                                                                                                                                                                                                                                                                                                                                                                      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 833, 883, 929, 978, 
                                                                                                                                                                                                                                                                                                                                                                                                                                      NA, 1081, 1131, 1185, 1240, 1293, 1348, 1406, 1462, 1521.4, 1581.3, 
                                                                                                                                                                                                                                                                                                                                                                                                                                      1644.6, 1710, 1775.4, 1842.5, 1910.2, 1979.9, 2050.5, 2122.9, 
                                                                                                                                                                                                                                                                                                                                                                                                                                      2195.3, 2270.6, 2345.5, 2422.6, NA, NA, NA, NA, NA, NA, 2996.1, 
                                                                                                                                                                                                                                                                                                                                                                                                                                      3082.3, 3170.8, NA, NA, NA)), row.names = c(NA, -93L), class = "data.frame")
